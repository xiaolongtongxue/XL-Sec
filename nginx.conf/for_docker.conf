# user  www www;
worker_processes auto;
error_log  logs/nginx_error.log  crit;
pid        logs/nginx.pid;
worker_rlimit_nofile 51200;

stream {
    log_format tcp_format '$time_local|$remote_addr|$protocol|$status|$bytes_sent|$bytes_received|$session_time|$upstream_addr|$upstream_bytes_sent|$upstream_bytes_received|$upstream_connect_time';

    access_log logs/tcp-access.log tcp_format;
    error_log logs/tcp-error.log;
}

events {
    use epoll;
    worker_connections 51200;
    multi_accept on;
}

http {

    lua_shared_dict w_config 20m;
    lua_shared_dict w_switches 1m;
    lua_shared_dict w_rules 100m;
    lua_shared_dict w_ips 10m;
    lua_shared_dict w_resps 20m;
    lua_shared_dict c_attack 50m;
    init_worker_by_lua_file  "/lua/IsWafLua/init.lua";
    access_by_lua_file "/lua/IsWafLua/waf.lua";
    lua_need_request_body on;

    ##################################
    include mime.types;
    default_type  application/octet-stream;

    server_names_hash_bucket_size 512;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;
    client_max_body_size 50m;

    sendfile   on;
    tcp_nopush on;

    keepalive_timeout 60;

    tcp_nodelay on;

    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 256k;
	fastcgi_intercept_errors on;

    gzip on;
    gzip_min_length  1k;
    gzip_buffers     4 16k;
    gzip_http_version 1.1;
    gzip_comp_level 2;
    gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml;
    gzip_vary on;
    gzip_proxied   expired no-cache no-store private auth;
    gzip_disable   "MSIE [1-6]\.";

    limit_conn_zone $binary_remote_addr zone=perip:10m;
	limit_conn_zone $server_name zone=perserver:10m;

    server_tokens off;
    access_log off;
    # include /etc/nginx/conf.d/*.conf;
    include /conf/*.conf;
    
    ###########################

    geo $allowed_ips {
        default 0;
        127.0.0.1 1;
    }
    server{
        listen 81;
        # server_name "test.test";
        location  / {
            default_type text/html;
            charset utf-8;
            content_by_lua_block {
                ngx.say(package.path)
                ngx.say('<h1>Hello World</h1>')
                ngx.say('内部站点，别来无恙哈')
            }
        }
        location = /showing/attack {
            default_type text/html;
            # if ($allowed_ips = 0) { return 400; }
            content_by_lua_block {
                local shared_dict = ngx.shared.c_attack;
                local keys = shared_dict:get_keys()    -- 获取共享内存中的所有键值
                for i, key in ipairs(keys) do
                    local value = shared_dict:get(key) -- 获取对应的值
                    ngx.say(key .. "  ::: " .. value)  -- 打印键值和对应的值
                end
            }
        }
        location = /showing/rules {
            default_type text/html;
            # if ($allowed_ips = 0) { return 400; }
            content_by_lua_block {
                local shared_dict = ngx.shared.w_rules;
                local keys = shared_dict:get_keys()    -- 获取共享内存中的所有键值
                for i, key in ipairs(keys) do
                    local value = shared_dict:get(key) -- 获取对应的值
                    ngx.say(key .. "  ::: " .. value)  -- 打印键值和对应的值
                end
            }
        }
        location = /showing/ips {
            default_type text/html;
            # if ($allowed_ips = 0) { return 400; }
            content_by_lua_block {
                local shared_dict = ngx.shared.w_ips;
                local keys = shared_dict:get_keys()    -- 获取共享内存中的所有键值
                for i, key in ipairs(keys) do
                    local value = shared_dict:get(key) -- 获取对应的值
                    ngx.say(key .. "  ::: " .. value)  -- 打印键值和对应的值
                end
            }
        }
        location = /setdata {
            default_type text/html;
            content_by_lua_file /lua/IsWafLua/check.lua;
        }
        location = /setdata_basyiudhfgbvyuisdgfuysrgbvfuyrv{
            default_type text/html;
            content_by_lua_file /lua/IsWafLua/check.lua;
        }
        location = /unlockip {
            # if ($allowed_ips = 0) { return 400; }
            default_type text/html;
            content_by_lua_file /lua/IsWafLua/nlock.lua;
        }
        error_log /lua/logs/error.log;
        access_log /lua/logs/access.log;
    }

}